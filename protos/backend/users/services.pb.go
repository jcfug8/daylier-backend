// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/backend/users/services.proto

package users

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	commons "github.com/jcfug8/daylier-backend/protos/commons"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protos/backend/users/services.proto", fileDescriptor_7a6be8917775e9fd)
}

var fileDescriptor_7a6be8917775e9fd = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0x4a, 0x4c, 0xce, 0x4e, 0xcd, 0x4b, 0xd1, 0x2f, 0x2d, 0x4e, 0x2d, 0x2a,
	0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x03, 0xcb, 0x0a, 0xf1, 0x42, 0x65,
	0xf5, 0xc0, 0xb2, 0x52, 0x32, 0x50, 0x3d, 0xc9, 0xf9, 0xb9, 0xb9, 0xf9, 0x79, 0xc5, 0xfa, 0xe9,
	0xa9, 0x79, 0xa9, 0x45, 0x89, 0x39, 0x10, 0xc5, 0x46, 0x66, 0x5c, 0x1c, 0xa1, 0x20, 0x65, 0x8e,
	0x01, 0x9e, 0x42, 0x5a, 0x5c, 0x2c, 0x01, 0x99, 0x79, 0xe9, 0x42, 0x02, 0x7a, 0x50, 0xb5, 0x7a,
	0x20, 0x6e, 0x50, 0x6a, 0xa1, 0x14, 0xba, 0x48, 0xb1, 0x91, 0x15, 0x17, 0x0f, 0x58, 0x5f, 0x40,
	0x6a, 0x51, 0x71, 0x66, 0x71, 0x09, 0x29, 0x7a, 0x9d, 0x2c, 0xa2, 0xcc, 0xd2, 0x33, 0x4b, 0x32,
	0x4a, 0x93, 0x40, 0x32, 0xfa, 0x59, 0xc9, 0x69, 0xa5, 0xe9, 0x16, 0xfa, 0x29, 0x89, 0x95, 0x39,
	0x99, 0xa9, 0x45, 0xba, 0x30, 0xaf, 0x61, 0xf3, 0x69, 0x12, 0x1b, 0x58, 0xd4, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x8e, 0xbc, 0xac, 0x29, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsersAPIClient is the client API for UsersAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersAPIClient interface {
	Ping(ctx context.Context, in *commons.PingReq, opts ...grpc.CallOption) (*commons.PingRes, error)
}

type usersAPIClient struct {
	cc *grpc.ClientConn
}

func NewUsersAPIClient(cc *grpc.ClientConn) UsersAPIClient {
	return &usersAPIClient{cc}
}

func (c *usersAPIClient) Ping(ctx context.Context, in *commons.PingReq, opts ...grpc.CallOption) (*commons.PingRes, error) {
	out := new(commons.PingRes)
	err := c.cc.Invoke(ctx, "/backend.users.UsersAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersAPIServer is the server API for UsersAPI service.
type UsersAPIServer interface {
	Ping(context.Context, *commons.PingReq) (*commons.PingRes, error)
}

// UnimplementedUsersAPIServer can be embedded to have forward compatible implementations.
type UnimplementedUsersAPIServer struct {
}

func (*UnimplementedUsersAPIServer) Ping(ctx context.Context, req *commons.PingReq) (*commons.PingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterUsersAPIServer(s *grpc.Server, srv UsersAPIServer) {
	s.RegisterService(&_UsersAPI_serviceDesc, srv)
}

func _UsersAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.users.UsersAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersAPIServer).Ping(ctx, req.(*commons.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.users.UsersAPI",
	HandlerType: (*UsersAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UsersAPI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/backend/users/services.proto",
}

// UsersPersistClient is the client API for UsersPersist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersPersistClient interface {
	Ping(ctx context.Context, in *commons.PingReq, opts ...grpc.CallOption) (*commons.PingRes, error)
}

type usersPersistClient struct {
	cc *grpc.ClientConn
}

func NewUsersPersistClient(cc *grpc.ClientConn) UsersPersistClient {
	return &usersPersistClient{cc}
}

func (c *usersPersistClient) Ping(ctx context.Context, in *commons.PingReq, opts ...grpc.CallOption) (*commons.PingRes, error) {
	out := new(commons.PingRes)
	err := c.cc.Invoke(ctx, "/backend.users.UsersPersist/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersPersistServer is the server API for UsersPersist service.
type UsersPersistServer interface {
	Ping(context.Context, *commons.PingReq) (*commons.PingRes, error)
}

// UnimplementedUsersPersistServer can be embedded to have forward compatible implementations.
type UnimplementedUsersPersistServer struct {
}

func (*UnimplementedUsersPersistServer) Ping(ctx context.Context, req *commons.PingReq) (*commons.PingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterUsersPersistServer(s *grpc.Server, srv UsersPersistServer) {
	s.RegisterService(&_UsersPersist_serviceDesc, srv)
}

func _UsersPersist_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersPersistServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.users.UsersPersist/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersPersistServer).Ping(ctx, req.(*commons.PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersPersist_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.users.UsersPersist",
	HandlerType: (*UsersPersistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UsersPersist_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/backend/users/services.proto",
}
